
import GaussianProcesses: predict
using GaussianProcesses

using EnsembleKalmanProcesses.DataContainers

using DocStringExtensions
using PyCall
using ScikitLearn
using AbstractGPs
using KernelFunctions
const pykernels = PyNULL()
const pyGP = PyNULL()
function __init__()
    copy!(pykernels, pyimport_conda("sklearn.gaussian_process.kernels", "scikit-learn=1.1.1"))
    copy!(pyGP, pyimport_conda("sklearn.gaussian_process", "scikit-learn=1.1.1"))
end

#exports (from Emulator)
export GaussianProcess

export GPJL, SKLJL, AGPJL
export YType, FType

"""
$(DocStringExtensions.TYPEDEF)

Type to dispatch which GP package to use:

 - `GPJL` for GaussianProcesses.jl,
 - `SKLJL` for the ScikitLearn GaussianProcessRegressor.
 - `AGPJL` for AbstractGPs.jl,
"""
abstract type GaussianProcessesPackage end
struct GPJL <: GaussianProcessesPackage end
struct SKLJL <: GaussianProcessesPackage end
struct AGPJL <: GaussianProcessesPackage end
"""
$(DocStringExtensions.TYPEDEF)

Predict type for `GPJL` in GaussianProcesses.jl:
 - `YType`
 - `FType` latent function.
"""
abstract type PredictionType end
struct YType <: PredictionType end
struct FType <: PredictionType end

"""
$(DocStringExtensions.TYPEDEF)

Structure holding training input and the fitted Gaussian process regression
models.

# Fields
$(DocStringExtensions.TYPEDFIELDS)

"""
struct GaussianProcess{GPPackage, FT} <: MachineLearningTool
    "The Gaussian Process (GP) Regression model(s) that are fitted to the given input-data pairs."
    models::Vector{Union{<:GaussianProcesses.GPE, <:PyObject, <:AbstractGPs.PosteriorGP, Nothing}}
    "Kernel object."
    kernel::Union{<:GaussianProcesses.Kernel, <:PyObject, <:AbstractGPs.Kernel, Nothing}
    "Learn the noise with the White Noise kernel explicitly?"
    noise_learn::Bool
    "Additional observational or regularization noise in used in GP algorithms"
    alg_reg_noise::FT
    "Prediction type (`y` to predict the data, `f` to predict the latent function)."
    prediction_type::PredictionType

end


"""
$(DocStringExtensions.TYPEDSIGNATURES)

 - `package` - GaussianProcessPackage object.
 - `kernel` - GaussianProcesses kernel object. Default is a Squared Exponential kernel.
 - `noise_learn` - Boolean to additionally learn white noise in decorrelated space. Default is true.
 - `alg_reg_noise` - Float to fix the (small) regularization parameter of algorithms when `noise_learn = true`
 - `prediction_type` - PredictionType object. Default predicts data, not latent function (FType()).
"""
function GaussianProcess(
    package::GPPkg;
    kernel::Union{GPK, KPy, AGPK, Nothing} = nothing,
    noise_learn = true,
    alg_reg_noise::FT = 1e-3,
    prediction_type::PredictionType = YType(),
) where {GPPkg <: GaussianProcessesPackage, GPK <: GaussianProcesses.Kernel, KPy <: PyObject, AGPK <: AbstractGPs.Kernel, FT <: AbstractFloat}

    # Initialize vector for GP models
    models = Vector{Union{<:GaussianProcesses.GPE, <:PyObject, <:AbstractGPs.PosteriorGP, Nothing}}(undef, 0)

    # the algorithm regularization noise is set to some small value if we are learning noise, else
    # it is fixed to the correct value (1.0)
    if !(noise_learn)
        alg_reg_noise = 1.0
    end

    return GaussianProcess{typeof(package), FT}(models, kernel, noise_learn, alg_reg_noise, prediction_type)
end

# First we create  the GPJL implementation
"""
$(DocStringExtensions.TYPEDSIGNATURES)

Method to build Gaussian process models based on the package.
"""
function build_models!(
    gp::GaussianProcess{GPJL},
    input_output_pairs::PairedDataContainer{FT},
) where {FT <: AbstractFloat}
    # get inputs and outputs
    input_values = get_inputs(input_output_pairs)
    output_values = get_outputs(input_output_pairs)

    # Number of models (We are fitting one model per output dimension, as data is decorrelated)
    models = gp.models
    if length(gp.models) > 0 # check to see if gp already contains models
        @warn "GaussianProcess already built. skipping..."
        return
    end
    N_models = size(output_values, 1) #size(transformed_data)[1]


    # Use a default kernel unless a kernel was supplied to GaussianProcess
    if gp.kernel === nothing
        println("Using default squared exponential kernel, learning length scale and variance parameters")
        # Construct kernel:
        # Note that the kernels take the signal standard deviations on a
        # log scale as input.
        rbf_len = log.(ones(size(input_values, 1))) .+ 1e-3
        rbf_logstd = log(1.0) + 1e-3
        rbf = SEArd(rbf_len, rbf_logstd)
        kern = rbf
        println("Using default squared exponential kernel: ", kern)
    else
        kern = deepcopy(gp.kernel)
        println("Using user-defined kernel", kern)
    end

    if gp.noise_learn
        # Add white noise to kernel
        white_logstd = 1.0
        white = Noise(white_logstd)
        kern = kern + white
        println("Learning additive white noise")
    end
    logstd_regularization_noise = log(sqrt(gp.alg_reg_noise))

    for i in 1:N_models
        # Make a copy of the kernel (because it gets altered in every
        # iteration)
        kernel_i = deepcopy(kern)
        println("kernel in GaussianProcess:")
        println(kernel_i)
        data_i = output_values[i, :]
        # GaussianProcesses.GPE() arguments:
        # input_values:    (input_dim × N_samples)
        # GPdata_i:    (N_samples,)

        # Zero mean function
        kmean = MeanZero()

        # Instantiate GP model
        m = GaussianProcesses.GPE(input_values, output_values[i, :], kmean, kernel_i, logstd_regularization_noise)
        println("created GP: ", i)
        push!(models, m)

    end

end

"""
$(DocStringExtensions.TYPEDSIGNATURES)

Optimize Gaussian process hyperparameters using in-build package method.

Warning: if one uses `GPJL()` and wishes to modify positional arguments. The first positional argument must be the `Optim` method (default `LBGFS()`).
"""
function optimize_hyperparameters!(gp::GaussianProcess{GPJL}, args...; kwargs...)
    N_models = length(gp.models)
    num_params = 0

    println("type of fieldnames of num_params: ", fieldnames(typeof(gp.models[1].kernel)))
    kernel = gp.models[1].kernel
    if isa(kernel, GaussianProcesses.SumKernel)
        println("SumKernel components:")
        for k in (kernel.kleft, kernel.kright)
            println("Kernel: $(typeof(k))")
            for field in fieldnames(typeof(k))
                value = getfield(k, field)
                length_value = isa(value, AbstractArray) ? length(value) : 1
                num_params += length_value
            end
        end
    else
        println("Single Kernel: $(typeof(kernel))")
        for field in fieldnames(typeof(kernel))
            value = getfield(kernel, field)
            length_value = isa(value, AbstractArray) ? length(value) : 1
            num_params += length_value
        end
    end
    println("num_params: ", num_params)

    for i in 1:N_models
        # always regress with noise_learn=false; if gp was created with noise_learn=true
        # we've already explicitly added noise to the kernel
        optimize!(gp.models[i], args...; kernbounds = [fill(1e-4, num_params), fill(1e2, num_params)], noise = false, kwargs...)
        println("optimized hyperparameters of GP: ", i)
        println(gp.models[i].kernel)
    end
end

# subroutine with common predict() logic
function _predict(
    gp::GaussianProcess,
    new_inputs::AbstractMatrix{FT},
    predict_method::Function,
) where {FT <: AbstractFloat}
    M = length(gp.models)
    N_samples = size(new_inputs, 2)
    # Predicts columns of inputs: input_dim × N_samples
    μ = zeros(M, N_samples)
    σ2 = zeros(M, N_samples)
    for i in 1:M
        μ[i, :], σ2[i, :] = predict_method(gp.models[i], new_inputs)
    end

    return μ, σ2
end

predict(gp::GaussianProcess{GPJL}, new_inputs::AbstractMatrix{FT}, ::YType) where {FT <: AbstractFloat} =
    _predict(gp, new_inputs, GaussianProcesses.predict_y)

predict(gp::GaussianProcess{GPJL}, new_inputs::AbstractMatrix{FT}, ::FType) where {FT <: AbstractFloat} =
    _predict(gp, new_inputs, GaussianProcesses.predict_f)

"""
$(DocStringExtensions.TYPEDSIGNATURES)

Predict means and covariances in decorrelated output space using Gaussian process models.
"""
predict(gp::GaussianProcess{GPJL}, new_inputs::AbstractMatrix{FT}) where {FT <: AbstractFloat} =
    predict(gp, new_inputs, gp.prediction_type)


#now we build the SKLJL implementation
function build_models!(
    gp::GaussianProcess{SKLJL},
    input_output_pairs::PairedDataContainer{FT},
) where {FT <: AbstractFloat}
    # get inputs and outputs
    input_values = permutedims(get_inputs(input_output_pairs), (2, 1))
    output_values = get_outputs(input_output_pairs)

    # Number of models (We are fitting one model per output dimension, as data is decorrelated)
    models = gp.models
    if length(gp.models) > 0 # check to see if gp already contains models
        @warn "GaussianProcess already built. skipping..."
        return
    end

    N_models = size(output_values, 1) #size(transformed_data)[1]

    if gp.kernel === nothing
        println("Using default squared exponential kernel, learning length scale and variance parameters")
        # Create default squared exponential kernel
        const_value = 1.0
        var_kern = pykernels.ConstantKernel(constant_value = const_value, constant_value_bounds = (1e-5, 1e4))
        rbf_len = ones(size(input_values, 2))
        rbf = pykernels.RBF(length_scale = rbf_len, length_scale_bounds = (1e-5, 1e4))
        kern = var_kern * rbf
        println("Using default squared exponential kernel:", kern)
    else
        kern = deepcopy(gp.kernel)
        println("Using user-defined kernel", kern)
    end

    if gp.noise_learn
        # Add white noise to kernel
        white_noise_level = 1.0
        white = pykernels.WhiteKernel(noise_level = white_noise_level, noise_level_bounds = (1e-05, 10.0))
        kern = kern + white
        println("Learning additive white noise")
    end

    regularization_noise = gp.alg_reg_noise

    for i in 1:N_models
        kernel_i = deepcopy(kern)
        data_i = output_values[i, :]
        m = pyGP.GaussianProcessRegressor(kernel = kernel_i, n_restarts_optimizer = 10, alpha = regularization_noise)

        # ScikitLearn.fit! arguments:
        # input_values:    (N_samples × input_dim)
        # data_i:    (N_samples,)
        ScikitLearn.fit!(m, input_values, data_i)
        if i == 1
            println(m.kernel.hyperparameters)
            print("Completed training of: ")
        end
        println(i, ", ")
        push!(models, m)

    end
end


function optimize_hyperparameters!(gp::GaussianProcess{SKLJL}, args...; kwargs...)
    println("SKlearn, already trained. continuing...")
#    for (i, model) in enumerate(gp.models)
#        println("Model $i hyperparameters:")
#        println(model.kernel.hyperparameters)
#    end
end

function _SKJL_predict_function(gp_model::PyObject, new_inputs::AbstractMatrix{FT}) where {FT <: AbstractFloat}
    # SKJL based on rows not columns; need to transpose inputs
    μ, σ = gp_model.predict(new_inputs', return_std = true)
    return μ, (σ .* σ)
end
function predict(gp::GaussianProcess{SKLJL}, new_inputs::AbstractMatrix{FT}) where {FT <: AbstractFloat}
    μ, σ2 = _predict(gp, new_inputs, _SKJL_predict_function)

    # for SKLJL does not return the observational noise (even if return_std = true)
    # we must add contribution depending on whether we learnt the noise or not.
    σ2[:, :] = σ2[:, :] .+ gp.alg_reg_noise

    return μ, σ2
end

#We build the AGPJL implementation
function build_models!(
    gp::GaussianProcess{AGPJL},
    input_output_pairs::PairedDataContainer{FT},
) where {FT <: AbstractFloat}
    # get inputs and outputs
    input_values = permutedims(get_inputs(input_output_pairs), (2, 1))
    output_values = get_outputs(input_output_pairs)

    # Number of models (We are fitting one model per output dimension, as data is decorrelated)
    models = gp.models
    if length(gp.models) > 0 # check to see if gp already contains models
        @warn "GaussianProcess already built. skipping..."
        return
    end
    N_models = size(output_values, 1) #size(transformed_data)[1]
    if gp.kernel === nothing
        println("Using default squared exponential kernel, learning length scale and variance parameters")
        # Create default squared exponential kernel
        const_value = 1.0
        rbf_len = fill(1.0, size(input_values, 2))
        rbf = const_value * (KernelFunctions.SqExponentialKernel() ∘ ARDTransform(rbf_len))
        kern = rbf
        println("Using default squared exponential kernel:", kern)
    else
        kern = deepcopy(gp.kernel)
        println("Using user-defined kernel", kern)
    end

    if gp.noise_learn
        # Add white noise to kernel
        white_noise_level = 1.0
        white = KernelFunctions.WhiteKernel(white_noise_level)
        kern += white
        println("Learning additive white noise")
    end

    regularization_noise = gp.alg_reg_noise
    #println("size of regularization_noise: ", size(regularization_noise))

    #println("size of input_values: ", size(input_values))
    #println("size of output_values: ", size(output_values))
    for i in 1:N_models
        kernel_i = deepcopy(kern)
        # In contrast to the GPJL and SKLJL case "data_i = output_values[i, :]"
        data_i = output_values[i, :]
        f = AbstractGPs.GP(kernel_i)
        # println("size of data_i: ", size(data_i)) # delete
        # println("size of transposed data_i: ", size(data_i')) # delete
        # f arguments:
        # input_values:    (input_dim * N_dims)
        fx = f(input_values', regularization_noise)
        # posterior arguments:
        # data_i:    (N_samples,)
        post_fx = posterior(fx, data_i)
        if i == 1
            println(kernel_i)
            print("Completed training of: ")
        end
        println("created GP: ", i)
        # push!(models, post_fx)
        # println(post_fx)
    end
    ##############################################################################
    # Notes on borrowing hyperparameters optimised within GPJL:
    # optimisation of the GPJL with default kernels produces kernel parameters
    # in the way of [a b c], where:
    # c is the log_const_value
    # [a b] is the rbf_len: lengthscale parameters for SEArd kernel
    # const_value = exp.(2 .* log_const_value)
    ##############################################################################
    ########################
    ### Sinusoid example (2-dim output):

    log_const_value = [2.9031145778344696; 3.8325906110973795]
    const_value = exp.(2 .* log_const_value)
    rbf_len =
    [1.9952706691900783 3.066374123568536;
    5.783676639895112 2.195849064147456]

    ########################
    ### Lorenz example (1-dim output):
    #=
    log_const_value = [2.3932175760896013]
    const_value = exp.(2 .* log_const_value)
    rbf_len = [1.866547062358829 3.2448512817054707]
    =#
    ########################
    ########################
    ########################
    ### Darcy flow example ({(N / obs_ΔN - 1)^2}-dim output)
    # 10 imput dim,
    # 9 output dim
    #=
    log_const_value = [
    4.099090230238089; 3.8408900305740405; 4.092791003151909; 4.392218999338882;
    4.145075102454915; 4.221058038517253; 4.690594758595945; 4.422735897981335;
    4.4141924065600415;
    ]
    const_value = exp.(2 .* log_const_value)
    rbf_len = [
    2.3980326154228555 2.7234678846682585 3.4764653925838 4.622609342820126 4.4638133018554855 50.000627272355125 5.0331200957219995 4.8356269896223365 5.130802183778745 50.000625988887435;
    2.1831244734160697 3.229017004975972 3.2897336308347636 3.710127125669326 5.003637729420296 3.4972010161437823 5.5763266488348595 4.240446372476601 5.24393119997902 50.000845041816945;
    2.4859749158644746 4.860081692990578 3.5506940149532764 3.719336541464725 4.4069740500471655 5.918318095316542 5.131119761334307 50.0007634715251 5.636939089440864 50.00076086381682;
    2.482488076401266 2.891679990952097 3.1077284566008148 6.585148156221434 4.969537081150189 4.5891915518246 6.39065955931199 50.002421354124806 5.622046696152831 5.353662934098931;
    1.910759933348178 3.751546951419663 3.0580657232349626 4.821724090667089 4.342495266180035 50.002294729428364 5.234808200088385 4.914567094192162 50.00229542851298 4.921432185519618;
    2.320782210102354 3.7142358842892857 3.159176624849679 4.62284340725769 4.869252586186476 3.7373588963960565 4.936314818831469 4.544107386420473 4.771381813623435 5.001036557018643;
    2.5480757011810766 3.274433467924124 3.440464862019787 4.3373138539080545 4.316418318497873 4.717446491888602 5.468603858884622 4.919778955716652 50.002369727957216 6.120353029294434;
    2.1485246126642483 4.854407921840533 3.181847933312543 6.689423591051363 5.248910817285488 3.002739055756078 3.7994111351951374 50.00337943640723 5.490598541410307 3.6131407757400775;
    2.4109845979166113 2.993120745213261 3.029401249901274 3.90842036691183 3.564801863973809 6.050527091740314 4.0484868392063085 4.7515268434398665 50.001608417231886 3.1605625002618805;
    ]
    =#
    ########################
    # Darcy
    # 10 imput dim,
    # 16 output dim
    #=
    log_const_value = [
    4.13872177499373; 4.6180038356372135; 4.12382933251077; 4.3410480174987; 3.6615574324204077; 4.388484020677915; 3.83398142268771; 3.4954657647608207; 4.733219150796677; 5.081751634746538; 5.369714460221456; 4.33522366458719; 5.166149058193272; 4.859504464329931; 5.021375029435032; 4.683633697195906
    ]

    const_value = exp.(2 .* log_const_value)
    rbf_len = [
    3.0241271415753763 3.2346361676259603 50.00037205516955 3.803694532993584 4.981300180595649 50.00037214194326 6.090328253396655 4.305485746030914 5.645875291103416 5.157485485756626;
    2.4964796045575572 4.175128113754718 5.4799430700923795 50.001752723302076 5.597292264099214 4.3196070116604774 50.001753194176345 5.382873826694257 50.0017530576229 5.419940983103198;
    2.9893344025506967 3.51200953135841 4.119548048849775 4.210535025831751 4.491365930391509 3.966421765788109 50.001044638608 6.0287108144166695 5.2132178046739694 4.533611248689983;
    3.3079884292749995 5.35909405627229 4.284982312573981 3.3359802514277077 4.418214771600103 7.674003298902893 5.137301395823422 5.7048999162002065 5.166801663040598 5.902083228417578;
    1.9798363952599969 2.5124307650275046 4.059025134012722 50.000912425672134 4.23543235615886 4.533739777219722 3.8972106787606613 4.234896525613788 3.346364486371884 5.7907301997240985;
    2.40381456574148 3.66045934919358 3.484378454422675 4.698034205438295 3.9736595089387947 3.8289169842837323 5.998236321280337 4.292390252966585 4.3569892829282235 50.002073158682826;
    1.6135694922010995 3.0227064900136127 50.00020637536782 3.5075759697799844 1.9375594816259702 1.6084402235538748 50.00020639318335 50.000206357533706 50.00020639160081 50.00020640365508;
    1.9538362991040021 3.487719559788123 2.8625744660078163 3.7055435978657196 4.014194865347648 2.8430374742262075 50.000614434738104 2.683134581578496 50.00061443605902 5.82295033632373;
    2.4609728853490784 3.535538820863813 3.2479385922315314 3.9220747185096805 6.832217325317205 6.441614695107968 5.484263233107084 4.423318859869875 4.4607532827978025 4.3528955663919975;
    2.7238616485976084 4.323149503477895 4.08480058985369 4.072918758322615 4.1326822718443665 4.99750236173001 5.04564736863255 4.163521632220633 5.079456238999503 4.678653204510265;
    2.6859067646644683 50.008128281161284 4.266362409694007 5.669251412999764 4.684621031510011 5.337087853763009 5.697713871329116 4.234005646420433 4.296715780830569 5.53784957338476;
    2.1518028937410203 3.57107160043253 4.770712776517933 3.8247661001809616 5.437514435882015 3.7530849475175088 5.785776326411236 4.938503583900658 3.2189834978171796 5.189186598500945;
    2.427605313322242 4.482644433761956 2.7016713908539494 3.7300458002627472 6.349166624935283 5.363310756827801 6.7714381502979695 4.232795861329697 5.27125323486861 4.405140002605304;
    2.2862974598167014 4.563254891052296 2.899901798575708 3.5145333963094973 3.9006943017500335 4.190174931646043 4.762749778182194 3.4989051869323924 4.950241118701782 3.9378356538350845;
    3.041484940955505 5.392411257005715 3.1583010149338593 5.635788096219173 5.431379954165941 3.7389139332054886 4.221541406775223 3.539694571238211 4.005922851104179 4.758476932226439;
    2.4802767377056947 3.5527176964959577 4.19914035195989 3.5664618454279244 5.277062230166363 6.281265117832326 7.309318725499134 7.192318111434708 6.837990271595667 5.928980751142508;
    ]
    =#
    ########################
    # Darcy
    #=
    # 10 imput dim,
    # 49 output dim
    log_const_value = [
    2.122545742750973; 2.4976933611829577; 3.8453614572208235; 3.535980193552618; 3.5845338908461826; 3.2748040633292805; 2.4756674359982624;
    2.5394614846580796; 4.294325588101134; 3.5903277945881458; 4.252449338400577; 4.033158789172244; 3.744992816692803; 2.5861402921659566;
    2.6966663262373625; 4.331984943052523; 3.397463718303456; 4.366949700739243; 4.2714093451802; 4.102949980566879; 3.888799058117827;
    2.6553916703513236; 4.4215451137754815; 4.392444730185992; 4.512078846757502; 3.5915217248541476; 3.3900756511486603; 2.891501858126516;
    3.946328704395853; 4.520955426637684; 3.482675855011735; 3.6749932534504732; 3.584485560246245; 3.4272125912770526; 3.810036758933594;
    3.21349300698196; 4.164031803457346; 4.366114045096522; 4.361116821280447; 4.40768244921793; 4.328620970929658; 3.8992045557975996;
    3.8899324507454884; 4.238880297753391; 4.312426133202253; 4.138918522335965; 4.362460507603592; 4.3779907169805545; 3.599954861684062;
    ]
    const_value = exp.(2 .* log_const_value)
    rbf_len = [
    0.9658673456259114 0.13856415778672748 1.4342708766417638 49.98009846385163 50.0130039569518 50.03306767945504 49.99830175654209 49.9845899653343 49.98223528368496 50.00829393260134;
    1.2352353971867376 1.1229317127161071 0.4836298563994174 50.00137796373988 50.00045444943504 49.99933487211628 49.995778123630764 50.00061009105552 50.00082503751522 50.00254239246381;
    2.9344343353803075 4.543680520310615 3.668849907890761 4.342801576927874 5.233983732791911 4.460339476092765 5.868289269955437 4.277171203999528 4.810104075367663 4.889287948867353;
    2.8403510516270565 50.00021268295493 3.375650713413601 50.0002125210665 4.857951585084995 3.9434812404168857 5.1084623555663935 5.305685343679102 4.700288750790538 4.5269494259464045;
    2.7764019938422915 3.902290077882118 3.5273872056773246 4.083571817680453 4.110571085384685 3.748144074211389 4.354720802103365 4.434111168578465 50.00021241037533 4.168916217555318;
    2.676240705393042 3.16837636090561 3.6256185421023797 3.2099113390695746 3.5599654123361364 3.7038440420375522 6.233533037131362 3.645565613421985 5.293662767257377 4.100132150139541;
    2.081587647694379 3.051525558843741 2.589947494171256 2.789204256876022 1.235047914645797 50.00016863478113 50.000166371741095 49.99985362599176 49.999726781033885 50.0004313000182;
    0.00010000010202519084 1.2056877918355555 0.8334645172668596 50.000049921369765 50.000050274054445 50.000049641649454 50.00004985054654 50.00005077023718 50.000050372723194 50.00004938734413;
    3.3851272269434536 3.9611995393893396 4.110607674578022 4.345791931081741 3.0997921688482855 5.062307038410671 4.430855337119096 4.482594582637059 6.90449496191317 50.000329990164815;
    1.998122104393299 1.6405886144788517 3.6174876969385177 3.932354797493865 3.461184377753421 50.000192818262185 50.00022431805767 50.00004503251809 4.808391336451779 50.000327794280466;
    2.8120344903384997 3.0813322691709177 3.7784283843914936 5.058321705797991 4.784082060191905 50.00041766345489 50.00041761579952 4.81170243445156 4.538486427801217 50.000417731120706;
    2.765415629476103 3.253122316856899 3.40453110325274 5.401861985371249 5.442789323341443 6.045474783333 50.00049948115886 5.03427707450092 4.727327497322428 50.00049980136728;
    2.0921470505863207 3.1151658713749164 4.122323568434586 3.9088084076693552 5.837361695388017 50.00028701120288 4.8711622555059275 50.00028705508525 4.382300607960249 50.000287521604676;
    0.32784951301860066 0.8943006480594619 2.0548391027392525 50.00004777569437 49.99636998475806 49.999891061444785 49.99257970993288 50.01787136709607 50.00351935517369 49.99006576825878;
    0.00010000120581571941 1.2914287811847596 0.9145339439700604 50.000050798396565 50.000052784110274 50.00005224338172 50.00005275872912 50.00005396639097 50.000053666783664 50.00005444623261;
    3.184926790709778 3.8148778338898977 4.12250004550822 4.4223578829860735 3.0734507779102107 4.188977260453356 4.370441699379302 4.595674621767587 5.820183659112103 5.395038441089705;
    0.00010000094383384961 0.9063611591900382 1.4378876586551372 50.00005503633377 50.00005514913236 50.000055102064735 50.00005517578513 50.00005508745791 50.000055191162474 50.00005493148977;
2.718697765433542 50.00063601836382 3.8815323862300475 4.677683160407779 3.143847922176614 4.701430512492886 4.814677511923526 3.8291311215370136 4.306221100962093 3.994135314280981;
    2.4288152634917917 2.659541148346028 4.714632378791614 5.537846658319415 3.019919450291957 4.578021818981072 50.00083430749839 4.373522692463268 50.00084134536973 4.860465341881297;
    2.641188500692288 3.5916199506275963 4.397542418911695 50.000452115769136 4.496448924340414 4.376615800680743 4.501529424123196 3.6643450619758173 4.170230054514419 4.3926346921671025;
    2.943526294374597 3.0121544846144928 4.925667038650713 5.113301418637373 6.505035835999427 4.088791021006731 3.957120363438026 4.213685351698047 3.843273133333252 4.509668674005819;
    0.0664634527606903 0.7076622520913515 50.004035172972166 49.98967218054588 50.001145676064276 50.01873387851548 50.006902898479225 49.9835362867871 49.980774330306424 50.015184111944585;
    2.793605531002878 3.7873385099018613 4.634984438973027 4.966279882584866 5.40938394248494 4.49361901103335 4.713326666897432 4.916789178861322 6.3712461650292695 4.026181229137747;
    2.7718248068622375 3.6638513423738335 3.7249079255413684 4.60039839388311 4.092659847341666 4.536219516695155 4.421329302200423 4.4855872316148755 4.361480856907091 3.9110622453135067;
    2.746151147582074 5.017353880236705 5.344746153559694 4.655598974338021 3.1010811610581803 4.760361697040469 4.54044773713737 4.085485920957911 4.6735665631821695 3.8785932128644864;
    0.9344134136308034 1.1097739895524021 2.3975181149717497 2.2173837174310234 2.8698371311185658 50.00010313769454 50.00090056293717 49.99714159396709 50.0010216567142 50.00136143858816;
    0.9591848584674173 1.1025594303098736 1.8326447160127126 4.037446241035797 3.083472342626867 4.553454348604638 49.99971347774023 49.99828036986816 50.001898463439304 50.000655578278476;
    0.34358585570526845 1.0740488430571917 1.6024732846472507 50.00004524870986 50.0002966739408 50.00006445200368 50.00034764637439 50.00021185343132 49.99951561458126 49.99983371761775;
    3.0282868281059407 3.510892137968879 5.625070588125232 5.967463699989483 3.5386041516302544 4.235555176830021 50.000297770633544 4.634723154196354 4.638657415904252 6.074790545817839;
    2.4581701313034032 3.7363697752691034 5.894530848787905 50.001742920069425 7.007278739600802 4.958388546073187 5.100515380473916 4.802235205958035 6.445964874194865 6.989259194627808;
    0.2456325064501665 1.3116832017244942 1.9687275002059 50.00004225253683 50.00005136161496 50.00007337626547 50.00005759311706 50.00003145696799 50.00005254062924 50.000068231958664;
    1.762664273724272 1.6771868008308375 1.4013994623283594 4.3104390446439 2.1148557871490294 50.0009132413695 49.9999898303381 50.00212033576422 49.9977294476448 49.99980161222828;
    2.1801755584447 1.3256512995180258 1.3339076295023589 2.30672185447064 3.4075485176685563 50.000124108697996 50.00010922279143 50.00020029524986 50.00008351919163 50.000092109954004;
    1.1823743085474092 1.3672947073741337 1.3539968916677885 3.5488842527138464 50.00012858670083 4.858672287458815 50.000128846018846 50.000128770960195 50.000129034738116 50.00012996890959;
    2.389162896382678 3.5628358823178594 3.564888630500163 3.1013084843923804 5.275049005184254 3.195673990101009 5.292682858596176 3.472623450818066 4.384190198241006 50.00023155872993;
    0.679043865373331 2.663339594246777 3.3115216577768996 1.7835049615273333 50.000112815731924 50.00011277857905 50.00011277832809 4.010646749089501 50.00011276457224 4.157333558015545;
    2.5509114417659626 2.829736672246563 3.572955209143148 3.976543166784588 3.788353533850019 50.0005156471396 4.51465632160514 4.069375793442723 5.111376137966875 5.902693074183049;
    2.2741325377101083 2.8632350132496542 3.738920259916879 5.284658693344095 5.373031666565916 5.3932675628367805 3.6067333204786944 4.013275106004581 4.383197790198124 50.00097712620164;
    2.28844460853187 3.806269004777709 2.8543823465667875 5.258347832083786 6.557211014870229 4.10893696679839 3.569271134825422 4.10150345736925 5.303869776595588 50.00114776550582;
    2.3061660712881586 6.6108579312255555 2.8177177052014706 3.6099311042496827 5.420036871145785 4.811566483821707 4.132772741895687 5.3587000190631064 4.920910817641341 50.00163572962914;
    2.456297604629789 4.2953894583238945 2.7668532072304424 3.1079344460048604 3.831993397645265 50.000766731238215 4.895955525892117 5.295554933716108 4.929481666560205 50.000766774003885;
    2.4155993200112054 3.828122227081439 2.705844585502589 2.770679110521406 3.9640079046804235 3.4823541837811836 3.218448826553721 4.496366677049867 50.00029707019602 5.557892941988707;
    2.5820796335810834 2.768043333564974 4.0615574769553415 4.114433394396324 3.4831925994807573 50.00013809719288 50.00013816206797 3.1668096836459028 50.000137420978184 50.00013716344994;
    2.4536571999689554 2.596264969327564 3.4781071863136392 3.970442415575634 3.6100095563135657 4.638397292124902 4.316649615070479 3.656771215131479 5.318418192005013 50.00042422569465;
    2.2435929238119465 2.79650831134948 3.211388559846126 4.299296792511389 3.931961668044025 3.5102405238278815 3.5443580190514785 3.944479203172979 4.7292320250934345 5.7488615250012245;
    2.2056237933446576 3.6416154153056173 2.5236456493887407 50.00020273685588 3.9246220489542853 2.907600446450247 3.7887832020677714 50.0002023000661 50.0002020179644 50.00020143674754;
    2.5148161157792637 5.737862423798015 2.493993860452602 4.172198234094643 3.9887817225558275 3.534006219460728 6.217308517834261 4.746467135820377 3.789909913743171 6.201968868087399;
    2.71519461375572 4.529126408502695 2.6377604881880066 3.1104024539518256 3.7765728546321986 4.305552555772447 4.152848728040423 4.639508815369525 4.133536580650396 50.00086901746159;
    2.4971825634486695 3.674727700144349 2.1981133211570474 2.494590380488139 3.2799076942578558 4.304472086791089 2.7458552863335433 4.6843435497620165 4.605559014196347 5.478588114946117;
    ]
    =#
    ########################
    # Darcy
    # 12 imput dim
    # 10 output dim
    #=
    log_const_value = [
        3.6184533307801803; 3.8512433311083676; 3.500135315628713; 3.1606813081390372; 3.478370864875195; 3.445188433199775; 3.9920795911825016; 4.559449994855852; 4.369519287103897
        ]
    const_value = exp.(2 .* log_const_value)
    rbf_len = [
        2.8950923911349733 3.0479076150201987 50.000717904047846 4.222027546528497 4.701820174881691 5.396987757836773 5.12949337838194 50.0007477911649 4.681571212679631 50.000736265670994;
2.848773673634171 4.129435969788965 4.186456114265392 50.00208302333166 6.570882435524713 6.801987155962194 50.00207824397649 4.810952490819617 5.723392185876072 6.889038103453909;
3.0190779431631167 5.697199882670046 3.0200153202776185 3.9251358086930446 4.446748329646052 5.920914743598619 50.000877391097404 50.000871449368304 7.124964533441486 4.693420864806883;
2.4203906409891136 3.4965272449515075 3.1939117764699794 5.0657775922312185 50.001599632445114 3.249826894901427 50.00164231534299 3.494451172401612 2.969289617784081 3.6324077662365077;
2.519266700528029 3.368529399061221 2.9357237918089223 4.570967491815537 3.5672347961441133 3.8016925285890784 4.059318978825289 3.007953369317957 2.8945793759145584 3.2601684393952843;
2.6686985127235334 3.3983700385304974 2.7938119752201054 5.955743288084472 4.683313391763929 3.6177970237066717 3.903789454189632 3.5718076042800453 3.1251471514917046 3.4217265389834903;
2.9815578151118536 4.451591187719004 2.3106411295340976 4.139980638983682 5.977111628793453 4.025833373805036 5.036475458921632 4.041234820896696 4.424979892311996 3.8516739932394173;
2.439439529067513 2.9253620040405908 2.5103160324773364 3.758996400775348 3.4028252906709127 2.8774285131259343 3.534591314614896 2.844387487210856 3.4833132641522875 4.289381737487622;
2.5878607282168318 2.943219025884346 3.4664500655337354 3.2392943167637407 4.65111963848033 3.478910190929562 4.152044981093368 3.510497270554525 4.110006942624054 5.220006920462025;
    ]
    =#
    ########################
    # Darcy
    #  imput dim,
    #  output dim

    ########################
    #=
    input_length = size(input_values, 2)
    if input_length == 10 && N_models == 9
        log_const_value = [
            4.099090230238089; 3.8408900305740405; 4.092791003151909; 4.392218999338882;
            4.145075102454915; 4.221058038517253; 4.690594758595945; 4.422735897981335;
            4.4141924065600415;
            ]
            const_value = exp.(2 .* log_const_value)
            rbf_len = [
            2.3980326154228555 2.7234678846682585 3.4764653925838 4.622609342820126 4.4638133018554855 50.000627272355125 5.0331200957219995 4.8356269896223365 5.130802183778745 50.000625988887435;
            2.1831244734160697 3.229017004975972 3.2897336308347636 3.710127125669326 5.003637729420296 3.4972010161437823 5.5763266488348595 4.240446372476601 5.24393119997902 50.000845041816945;
            2.4859749158644746 4.860081692990578 3.5506940149532764 3.719336541464725 4.4069740500471655 5.918318095316542 5.131119761334307 50.0007634715251 5.636939089440864 50.00076086381682;
            2.482488076401266 2.891679990952097 3.1077284566008148 6.585148156221434 4.969537081150189 4.5891915518246 6.39065955931199 50.002421354124806 5.622046696152831 5.353662934098931;
            1.910759933348178 3.751546951419663 3.0580657232349626 4.821724090667089 4.342495266180035 50.002294729428364 5.234808200088385 4.914567094192162 50.00229542851298 4.921432185519618;
            2.320782210102354 3.7142358842892857 3.159176624849679 4.62284340725769 4.869252586186476 3.7373588963960565 4.936314818831469 4.544107386420473 4.771381813623435 5.001036557018643;
            2.5480757011810766 3.274433467924124 3.440464862019787 4.3373138539080545 4.316418318497873 4.717446491888602 5.468603858884622 4.919778955716652 50.002369727957216 6.120353029294434;
            2.1485246126642483 4.854407921840533 3.181847933312543 6.689423591051363 5.248910817285488 3.002739055756078 3.7994111351951374 50.00337943640723 5.490598541410307 3.6131407757400775;
            2.4109845979166113 2.993120745213261 3.029401249901274 3.90842036691183 3.564801863973809 6.050527091740314 4.0484868392063085 4.7515268434398665 50.001608417231886 3.1605625002618805;
            ]

    elseif input_length == 10 && N_models == 16
        log_const_value = [
            4.13872177499373; 4.6180038356372135; 4.12382933251077; 4.3410480174987; 3.6615574324204077; 4.388484020677915; 3.83398142268771; 3.4954657647608207; 4.733219150796677; 5.081751634746538; 5.369714460221456; 4.33522366458719; 5.166149058193272; 4.859504464329931; 5.021375029435032; 4.683633697195906
            ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            3.0241271415753763 3.2346361676259603 50.00037205516955 3.803694532993584 4.981300180595649 50.00037214194326 6.090328253396655 4.305485746030914 5.645875291103416 5.157485485756626;
            2.4964796045575572 4.175128113754718 5.4799430700923795 50.001752723302076 5.597292264099214 4.3196070116604774 50.001753194176345 5.382873826694257 50.0017530576229 5.419940983103198;
            2.9893344025506967 3.51200953135841 4.119548048849775 4.210535025831751 4.491365930391509 3.966421765788109 50.001044638608 6.0287108144166695 5.2132178046739694 4.533611248689983;
            3.3079884292749995 5.35909405627229 4.284982312573981 3.3359802514277077 4.418214771600103 7.674003298902893 5.137301395823422 5.7048999162002065 5.166801663040598 5.902083228417578;
            1.9798363952599969 2.5124307650275046 4.059025134012722 50.000912425672134 4.23543235615886 4.533739777219722 3.8972106787606613 4.234896525613788 3.346364486371884 5.7907301997240985;
            2.40381456574148 3.66045934919358 3.484378454422675 4.698034205438295 3.9736595089387947 3.8289169842837323 5.998236321280337 4.292390252966585 4.3569892829282235 50.002073158682826;
            1.6135694922010995 3.0227064900136127 50.00020637536782 3.5075759697799844 1.9375594816259702 1.6084402235538748 50.00020639318335 50.000206357533706 50.00020639160081 50.00020640365508;
            1.9538362991040021 3.487719559788123 2.8625744660078163 3.7055435978657196 4.014194865347648 2.8430374742262075 50.000614434738104 2.683134581578496 50.00061443605902 5.82295033632373;
            2.4609728853490784 3.535538820863813 3.2479385922315314 3.9220747185096805 6.832217325317205 6.441614695107968 5.484263233107084 4.423318859869875 4.4607532827978025 4.3528955663919975;
            2.7238616485976084 4.323149503477895 4.08480058985369 4.072918758322615 4.1326822718443665 4.99750236173001 5.04564736863255 4.163521632220633 5.079456238999503 4.678653204510265;
            2.6859067646644683 50.008128281161284 4.266362409694007 5.669251412999764 4.684621031510011 5.337087853763009 5.697713871329116 4.234005646420433 4.296715780830569 5.53784957338476;
            2.1518028937410203 3.57107160043253 4.770712776517933 3.8247661001809616 5.437514435882015 3.7530849475175088 5.785776326411236 4.938503583900658 3.2189834978171796 5.189186598500945;
            2.427605313322242 4.482644433761956 2.7016713908539494 3.7300458002627472 6.349166624935283 5.363310756827801 6.7714381502979695 4.232795861329697 5.27125323486861 4.405140002605304;
            2.2862974598167014 4.563254891052296 2.899901798575708 3.5145333963094973 3.9006943017500335 4.190174931646043 4.762749778182194 3.4989051869323924 4.950241118701782 3.9378356538350845;
            3.041484940955505 5.392411257005715 3.1583010149338593 5.635788096219173 5.431379954165941 3.7389139332054886 4.221541406775223 3.539694571238211 4.005922851104179 4.758476932226439;
            2.4802767377056947 3.5527176964959577 4.19914035195989 3.5664618454279244 5.277062230166363 6.281265117832326 7.309318725499134 7.192318111434708 6.837990271595667 5.928980751142508;
            ]

        elseif input_length == 10 && N_models == 25
        log_const_value = [
            2.241298563467425; 2.6985274242328092; 3.966387391683179; 3.3420610177528762; 3.164827039379091; 3.8390748919515443; 3.672206394275371; 3.4126974355000885; 3.6857388869516594; 4.203537093768173; 3.498948091371157; 3.934065432014633; 3.3754445724539917; 3.82123782665324; 3.2120448272713173; 3.8672761171759418; 4.150263601943356; 3.377866394274273; 4.075270504078392; 3.907550570137188; 4.03779964910656; 4.308437765826222; 3.815853477806667; 3.5481831964499775; 3.91911408913604
        ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            1.1509767848742054 1.037322530382853 49.99605847674688 49.993715592849995 49.976333030447314 50.00095692911259 50.02572450553509 49.98446648631111 1.6229537562963479 49.99424226616171;
            0.2025056517245043 2.24181100780527 1.7919906103383267 50.00152148531673 50.00290640539959 49.99526762602633 50.000417397250416 50.0007914115023 50.00167507414004 49.99810803820127;
            3.0646811526894813 50.0002914042423 3.2296690872246216 5.177945476334003 4.656027113468425 3.759786548988984 4.445837203771287 4.866215162389938 4.698095341026047 4.231045142618513;
            2.817057859702223 3.590731968976026 3.2017383000008484 4.921630769777326 4.207880095356415 3.7341705419825884 3.9415471290408974 50.00019165521638 4.060288840628298 4.683008503885356;
            3.2066845318288664 3.316924370393908 3.159739693008314 3.681218091485174 4.381636650785847 4.578776711198885 4.152842795752049 3.887390038881053 4.714693602791467 4.499887462411461;
            3.5205922932429474 4.370277227854163 4.401244249812071 5.714381920080593 6.960143728391825 4.122566893320506 4.786877770300194 4.260108923486773 5.681543706490904 4.615152941495793;
            2.5349370040409736 4.416902969109977 3.8416001720771216 6.168334830101544 4.98648422518383 4.9281979087529155 6.279977152220442 4.453250456632988 4.564176501772397 50.00149543983654;
            2.4331682127513807 3.291119930837505 3.173172256946948 4.632997104019895 3.052767687706391 50.00036002606297 50.00035472706979 4.297705088574817 4.208249106870627 3.615588051507778;
            2.730172774851808 3.1726416486647366 3.259384381740824 3.8123226389862914 2.8511691994041675 4.48993852278263 4.258374654707403 4.439676507415049 4.615710775860099 3.3337270245307042;
            3.8535795017209233 3.9566615492124546 4.027772417434509 4.129392854720109 5.387032826958311 3.4707944058956994 4.160101564609148 4.390195038697174 3.655895852329404 4.056003817822536;
            3.2443319319437443 3.52875264180014 3.258522265540741 4.733456706549141 50.00028005943808 3.6812257119700105 50.00028130763589 3.8031000014478344 50.00027938836986 4.3458276950317964;
            3.068937340878124 4.332462985800535 3.3969072594551286 4.640918391916489 4.3323164596829855 4.213935911394739 5.380288951293653 3.9130516074719237 3.790806709687238 4.664068869254196;
            2.4975700612403484 2.80094026781476 2.232880227582399 3.74026838629954 3.079195732317013 4.280636055150526 50.00042372361357 4.0779592660917 4.63705833764274 3.195575151225055;
            3.1215141328151477 3.1787881403620166 3.02124994003336 4.323911618731224 2.9247420714736965 4.3373372598105115 4.009014053479798 4.690865719106642 50.00091400586036 3.678704183722492;
            2.687291582084727 3.0785239469824783 3.094012012474532 4.055266319528156 50.000221279817595 3.1766695432246186 3.8420258306127635 5.380919180992927 3.684150117645729 4.248988177318124;
            3.2699295889499957 3.128874544433721 3.5005037028719586 4.148252726002111 5.2553743032881615 4.058626305098399 4.90336782479098 4.592962351207979 5.028990158248716 50.00040470507526;
            3.1088336185749634 3.7313444858547142 3.289921153194744 4.452216720623699 5.332784689730594 5.089998420571359 5.9888414691462435 4.541007205635708 50.001493517832905 5.956456676791557;
            2.532503870037406 3.096946605774134 2.5897945151745594 4.256073640731787 4.056026878590012 50.00029609337018 3.7884624192804024 3.340277453735303 4.273538895837209 50.00029631877573;
            2.916992661829998 3.4582298430712535 4.064476800570678 50.001007267449296 5.196404260928891 50.001006777346795 4.641118669276417 5.285412784499752 3.489023542347765 4.444309534662044;
            2.9220150846760626 3.2922025248773235 4.218171610852671 5.004397585907278 4.277073506544651 5.160773086507926 6.666578787200747 6.157311989132944 6.832668984845904 5.274662848909223;
            3.342380347388141 3.2921183115605563 3.1136097417297033 4.028757749709588 4.244917736212545 50.000442163095464 5.161271558311984 5.763132640729272 6.003832263216804 5.426519250988256;
            3.11060210922378 4.024035282897131 3.3232380717629297 4.191924278180815 5.101703693580647 4.969373679496144 5.097450043987121 50.00129704983455 5.506403095150015 5.856878657505786;
            2.539760101349623 50.00098890577073 2.969529317738875 4.900308790946484 5.023129107001032 3.915163097755622 3.9818920714319224 4.219244298683914 50.0009892369859 4.903690574724525;
            2.30217952188361 3.146273149568207 3.204545752152215 3.3705412298297515 3.393323402679913 3.4796447246702797 4.191522087463107 4.833141975746536 3.0334910077993538 50.00045003231658;
            3.061799619533277 3.6799053351394617 3.5413834044020107 4.062679844269443 3.766906388080497 4.639497861810844 5.978647333527602 5.466585454046602 5.284596919163046 5.266050542201218;
        ]

    elseif input_length == 10 && N_models == 49
        log_const_value = [
            2.122545742750973; 2.4976933611829577; 3.8453614572208235; 3.535980193552618; 3.5845338908461826; 3.2748040633292805; 2.4756674359982624;
            2.5394614846580796; 4.294325588101134; 3.5903277945881458; 4.252449338400577; 4.033158789172244; 3.744992816692803; 2.5861402921659566;
            2.6966663262373625; 4.331984943052523; 3.397463718303456; 4.366949700739243; 4.2714093451802; 4.102949980566879; 3.888799058117827;
            2.6553916703513236; 4.4215451137754815; 4.392444730185992; 4.512078846757502; 3.5915217248541476; 3.3900756511486603; 2.891501858126516;
            3.946328704395853; 4.520955426637684; 3.482675855011735; 3.6749932534504732; 3.584485560246245; 3.4272125912770526; 3.810036758933594;
            3.21349300698196; 4.164031803457346; 4.366114045096522; 4.361116821280447; 4.40768244921793; 4.328620970929658; 3.8992045557975996;
            3.8899324507454884; 4.238880297753391; 4.312426133202253; 4.138918522335965; 4.362460507603592; 4.3779907169805545; 3.599954861684062;
            ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            0.9658673456259114 0.13856415778672748 1.4342708766417638 49.98009846385163 50.0130039569518 50.03306767945504 49.99830175654209 49.9845899653343 49.98223528368496 50.00829393260134;
            1.2352353971867376 1.1229317127161071 0.4836298563994174 50.00137796373988 50.00045444943504 49.99933487211628 49.995778123630764 50.00061009105552 50.00082503751522 50.00254239246381;
            2.9344343353803075 4.543680520310615 3.668849907890761 4.342801576927874 5.233983732791911 4.460339476092765 5.868289269955437 4.277171203999528 4.810104075367663 4.889287948867353;
            2.8403510516270565 50.00021268295493 3.375650713413601 50.0002125210665 4.857951585084995 3.9434812404168857 5.1084623555663935 5.305685343679102 4.700288750790538 4.5269494259464045;
            2.7764019938422915 3.902290077882118 3.5273872056773246 4.083571817680453 4.110571085384685 3.748144074211389 4.354720802103365 4.434111168578465 50.00021241037533 4.168916217555318;
            2.676240705393042 3.16837636090561 3.6256185421023797 3.2099113390695746 3.5599654123361364 3.7038440420375522 6.233533037131362 3.645565613421985 5.293662767257377 4.100132150139541;
            2.081587647694379 3.051525558843741 2.589947494171256 2.789204256876022 1.235047914645797 50.00016863478113 50.000166371741095 49.99985362599176 49.999726781033885 50.0004313000182;
            0.00010000010202519084 1.2056877918355555 0.8334645172668596 50.000049921369765 50.000050274054445 50.000049641649454 50.00004985054654 50.00005077023718 50.000050372723194 50.00004938734413;
            3.3851272269434536 3.9611995393893396 4.110607674578022 4.345791931081741 3.0997921688482855 5.062307038410671 4.430855337119096 4.482594582637059 6.90449496191317 50.000329990164815;
            1.998122104393299 1.6405886144788517 3.6174876969385177 3.932354797493865 3.461184377753421 50.000192818262185 50.00022431805767 50.00004503251809 4.808391336451779 50.000327794280466;
            2.8120344903384997 3.0813322691709177 3.7784283843914936 5.058321705797991 4.784082060191905 50.00041766345489 50.00041761579952 4.81170243445156 4.538486427801217 50.000417731120706;
            2.765415629476103 3.253122316856899 3.40453110325274 5.401861985371249 5.442789323341443 6.045474783333 50.00049948115886 5.03427707450092 4.727327497322428 50.00049980136728;
            2.0921470505863207 3.1151658713749164 4.122323568434586 3.9088084076693552 5.837361695388017 50.00028701120288 4.8711622555059275 50.00028705508525 4.382300607960249 50.000287521604676;
            0.32784951301860066 0.8943006480594619 2.0548391027392525 50.00004777569437 49.99636998475806 49.999891061444785 49.99257970993288 50.01787136709607 50.00351935517369 49.99006576825878;
            0.00010000120581571941 1.2914287811847596 0.9145339439700604 50.000050798396565 50.000052784110274 50.00005224338172 50.00005275872912 50.00005396639097 50.000053666783664 50.00005444623261;
            3.184926790709778 3.8148778338898977 4.12250004550822 4.4223578829860735 3.0734507779102107 4.188977260453356 4.370441699379302 4.595674621767587 5.820183659112103 5.395038441089705;
            0.00010000094383384961 0.9063611591900382 1.4378876586551372 50.00005503633377 50.00005514913236 50.000055102064735 50.00005517578513 50.00005508745791 50.000055191162474 50.00005493148977;
            2.718697765433542 50.00063601836382 3.8815323862300475 4.677683160407779 3.143847922176614 4.701430512492886 4.814677511923526 3.8291311215370136 4.306221100962093 3.994135314280981;
            2.4288152634917917 2.659541148346028 4.714632378791614 5.537846658319415 3.019919450291957 4.578021818981072 50.00083430749839 4.373522692463268 50.00084134536973 4.860465341881297;
            2.641188500692288 3.5916199506275963 4.397542418911695 50.000452115769136 4.496448924340414 4.376615800680743 4.501529424123196 3.6643450619758173 4.170230054514419 4.3926346921671025;
            2.943526294374597 3.0121544846144928 4.925667038650713 5.113301418637373 6.505035835999427 4.088791021006731 3.957120363438026 4.213685351698047 3.843273133333252 4.509668674005819;
            0.0664634527606903 0.7076622520913515 50.004035172972166 49.98967218054588 50.001145676064276 50.01873387851548 50.006902898479225 49.9835362867871 49.980774330306424 50.015184111944585;
            2.793605531002878 3.7873385099018613 4.634984438973027 4.966279882584866 5.40938394248494 4.49361901103335 4.713326666897432 4.916789178861322 6.3712461650292695 4.026181229137747;
            2.7718248068622375 3.6638513423738335 3.7249079255413684 4.60039839388311 4.092659847341666 4.536219516695155 4.421329302200423 4.4855872316148755 4.361480856907091 3.9110622453135067;
            2.746151147582074 5.017353880236705 5.344746153559694 4.655598974338021 3.1010811610581803 4.760361697040469 4.54044773713737 4.085485920957911 4.6735665631821695 3.8785932128644864;
            0.9344134136308034 1.1097739895524021 2.3975181149717497 2.2173837174310234 2.8698371311185658 50.00010313769454 50.00090056293717 49.99714159396709 50.0010216567142 50.00136143858816;
            0.9591848584674173 1.1025594303098736 1.8326447160127126 4.037446241035797 3.083472342626867 4.553454348604638 49.99971347774023 49.99828036986816 50.001898463439304 50.000655578278476;
            0.34358585570526845 1.0740488430571917 1.6024732846472507 50.00004524870986 50.0002966739408 50.00006445200368 50.00034764637439 50.00021185343132 49.99951561458126 49.99983371761775;
            3.0282868281059407 3.510892137968879 5.625070588125232 5.967463699989483 3.5386041516302544 4.235555176830021 50.000297770633544 4.634723154196354 4.638657415904252 6.074790545817839;
            2.4581701313034032 3.7363697752691034 5.894530848787905 50.001742920069425 7.007278739600802 4.958388546073187 5.100515380473916 4.802235205958035 6.445964874194865 6.989259194627808;
            0.2456325064501665 1.3116832017244942 1.9687275002059 50.00004225253683 50.00005136161496 50.00007337626547 50.00005759311706 50.00003145696799 50.00005254062924 50.000068231958664;
            1.762664273724272 1.6771868008308375 1.4013994623283594 4.3104390446439 2.1148557871490294 50.0009132413695 49.9999898303381 50.00212033576422 49.9977294476448 49.99980161222828;
            2.1801755584447 1.3256512995180258 1.3339076295023589 2.30672185447064 3.4075485176685563 50.000124108697996 50.00010922279143 50.00020029524986 50.00008351919163 50.000092109954004;
            1.1823743085474092 1.3672947073741337 1.3539968916677885 3.5488842527138464 50.00012858670083 4.858672287458815 50.000128846018846 50.000128770960195 50.000129034738116 50.00012996890959;
            2.389162896382678 3.5628358823178594 3.564888630500163 3.1013084843923804 5.275049005184254 3.195673990101009 5.292682858596176 3.472623450818066 4.384190198241006 50.00023155872993;
            0.679043865373331 2.663339594246777 3.3115216577768996 1.7835049615273333 50.000112815731924 50.00011277857905 50.00011277832809 4.010646749089501 50.00011276457224 4.157333558015545;
            2.5509114417659626 2.829736672246563 3.572955209143148 3.976543166784588 3.788353533850019 50.0005156471396 4.51465632160514 4.069375793442723 5.111376137966875 5.902693074183049;
            2.2741325377101083 2.8632350132496542 3.738920259916879 5.284658693344095 5.373031666565916 5.3932675628367805 3.6067333204786944 4.013275106004581 4.383197790198124 50.00097712620164;
            2.28844460853187 3.806269004777709 2.8543823465667875 5.258347832083786 6.557211014870229 4.10893696679839 3.569271134825422 4.10150345736925 5.303869776595588 50.00114776550582;
            2.3061660712881586 6.6108579312255555 2.8177177052014706 3.6099311042496827 5.420036871145785 4.811566483821707 4.132772741895687 5.3587000190631064 4.920910817641341 50.00163572962914;
            2.456297604629789 4.2953894583238945 2.7668532072304424 3.1079344460048604 3.831993397645265 50.000766731238215 4.895955525892117 5.295554933716108 4.929481666560205 50.000766774003885;
            2.4155993200112054 3.828122227081439 2.705844585502589 2.770679110521406 3.9640079046804235 3.4823541837811836 3.218448826553721 4.496366677049867 50.00029707019602 5.557892941988707;
            2.5820796335810834 2.768043333564974 4.0615574769553415 4.114433394396324 3.4831925994807573 50.00013809719288 50.00013816206797 3.1668096836459028 50.000137420978184 50.00013716344994;
            2.4536571999689554 2.596264969327564 3.4781071863136392 3.970442415575634 3.6100095563135657 4.638397292124902 4.316649615070479 3.656771215131479 5.318418192005013 50.00042422569465;
            2.2435929238119465 2.79650831134948 3.211388559846126 4.299296792511389 3.931961668044025 3.5102405238278815 3.5443580190514785 3.944479203172979 4.7292320250934345 5.7488615250012245;
            2.2056237933446576 3.6416154153056173 2.5236456493887407 50.00020273685588 3.9246220489542853 2.907600446450247 3.7887832020677714 50.0002023000661 50.0002020179644 50.00020143674754;
            2.5148161157792637 5.737862423798015 2.493993860452602 4.172198234094643 3.9887817225558275 3.534006219460728 6.217308517834261 4.746467135820377 3.789909913743171 6.201968868087399;
            2.71519461375572 4.529126408502695 2.6377604881880066 3.1104024539518256 3.7765728546321986 4.305552555772447 4.152848728040423 4.639508815369525 4.133536580650396 50.00086901746159;
            2.4971825634486695 3.674727700144349 2.1981133211570474 2.494590380488139 3.2799076942578558 4.304472086791089 2.7458552863335433 4.6843435497620165 4.605559014196347 5.478588114946117;
            ]

    elseif input_length == 10 && N_models == 81
        log_const_value = [
        1.9739544272980918; 1.9846557632788349; 2.5924660669398696; 3.1595641982866183; 2.919470804502876; 3.4310827829568855; 3.4623733994463666; 2.3162156679658286; 2.376619459094283; 2.0245695540823885; 3.482232118609415; 3.773862435472327; 3.969883909983436; 3.956520032026694; 3.9892770289687114; 4.0593526473862; 3.6060002247819174; 2.152179562212779; 3.4859647900893; 3.7915962890652644; 3.923230797090765; 4.040650183266782; 4.119509389367926; 4.3607300776423354; 4.154454079330853; 3.724677547439897; 2.717461364425924; 3.88143502663379; 4.078449619619689; 4.085220907253849; 4.149850302712742; 4.217017579498028; 3.9737708428156346; 3.729420533941644; 3.7273064413140213; 3.4096564525352133; 3.8587263623829093; 4.354394994172295; 4.240654228461113; 4.331521610094779; 4.069736881519638; 3.808656085660186; 3.8199216538939313; 3.860598309398634; 3.339038023502659; 3.739719899653706; 4.320828247679225; 4.667075968519601; 5.0120511219792965; 4.498763294140612; 4.14216614073856; 4.070504889388727; 3.991161622773488; 3.471118902034676; 3.9373012287872453; 4.215291343517006; 4.610660475039643; 4.748261957408321; 4.415362720603021; 4.434143787491645; 4.636786682722471; 4.336404820410967; 3.508544362819208; 4.027104281667697; 4.340036259295866; 4.692936894674661; 4.605328451773897; 4.451890165786487; 4.722774306969868; 4.6804501621528; 4.5578192642978985; 3.9935442169050437; 1.963084747462508; 4.074084111216865; 4.242771749253779; 4.403656621987641; 4.489940264618951; 4.889630507151522; 4.4725496679475105; 4.220454583612254; 3.7834770981081873
        ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            1.511358199386928 1.1167391090435264 50.024344810533535 50.04176169541072 50.054688856219 49.997611298976395 50.05336512773541 49.86233542598687 49.760340246957334 50.02103106204845;
            49.99998501458589 50.00093796785347 49.99990223226761 49.99976290557822 49.999444333036905 49.999645338819654 49.999768904626364 50.00101909004651 50.00006015579362 49.99998067975482;
            0.7023546589030929 0.9365463342264704 50.000832194635024 49.99937045540474 50.00184950459508 49.998429802540585 49.99925791182562 50.000580499025304 49.999281573605835 49.99995838630412;
            1.861656788803094 50.000064666821984 3.1997737477346027 49.99998525662816 50.00017260414656 2.8533328859942415 50.0000103967715 4.077564363245911 50.00008484718076 50.0001006694107;
            1.6316749472102228 2.777886946154957 2.607337323964722 50.00623980260261 50.01086151913355 49.99965465051121 49.99173352537675 3.051792692768855 50.01264121389998 50.00256207954747;
            3.0592383811719697 4.985370870596951 3.43651878712536 4.881939579092707 4.436321029777118 3.885796180987047 4.648393172793561 5.177059162688402 50.00015746664964 5.379147006949338;
            3.144495543544933 4.4379719588184345 4.118701208271894 4.63948137245739 4.096928753823859 4.153663469562436 4.445848896950861 50.00014913125494 6.159773786302393 5.1519807143787455;
            1.2702831873321434 50.00633064162755 2.98142037040533 3.456062976087428 50.03171724667233 4.742604084912377 49.99989020342401 2.394581648196112 49.93346798845766 50.01921736855288;
            3.6208388837048493 3.6427739405846227 4.283072068109063 3.872640066545723 3.64061843307281 4.696036608417774 4.103943309910287 3.818053029682019 50.00011164949461 5.192066364121988;
            50.000010966034594 49.99990769555744 50.00030008774155 49.99984673886767 49.999860325399254 50.000408697557646 49.99997522504211 49.99978121085674 50.000174528142395 50.0002452360744;
            2.87950315619841 2.807204014427355 3.1914325807240194 4.912028506221737 5.116719864844142 6.086804596651939 4.177607403281292 4.746555899632953 6.315238864584253 5.075769422175768;
            2.7175559124250546 3.9137634274495565 3.4155927791439753 5.931362105143204 6.968402837416488 3.5697743059713116 4.533044640548346 4.420985577472918 50.00039041052919 5.182226228082213;
            2.82520789249324 4.514129224186728 3.4502849909138735 50.00036800267797 50.00036653193502 3.673493298864874 5.280801541391741 4.29214827921178 6.629533042427903 5.302580493756209;
            2.8993091434896856 5.2381413792863505 3.4287600397509643 5.5381396799247185 50.00038144034182 3.944045434784458 50.00038146196848 4.275976732878749 6.963492837025407 5.365024503829657;
            3.02111003464624 6.612949956396492 3.7261549908418994 4.9216717394578255 5.720296028242463 4.41897517037287 5.87423483562801 4.55860941728382 50.00057622884454 5.625606271433374;
            3.147290532197816 4.961265117554816 4.275544156990179 4.777075225695916 4.909165701693148 4.973955079096348 5.4567208690322 5.402187760697684 50.000453176875595 6.311612781786544;
            3.0917682436223486 4.3115200499081245 4.408191717782288 4.208163495245066 4.393925026918748 5.432263745761136 5.355598646096933 50.000249718354155 5.667319370484418 6.081920194857132;
            2.6324228985202796 2.4204647291494363 2.0883312497739777 50.000057495362185 50.00001833947057 50.00000112572996 50.00006782536708 3.6147140993406657 50.000036735454536 50.000085545070874;
            3.5910569147662064 3.528748605398227 3.730489644076361 5.063392262420223 4.714606023286453 4.955227220966882 5.363506046742083 50.000113599584 4.525964463880141 4.4212752722382165;
            3.101100499371223 3.367392118714963 3.4427608327682546 5.800504831714232 5.373013705651481 5.798539056191518 5.0625320196489945 5.096761030347049 5.340383141647955 4.471548489768205;
            2.917722055830449 3.7302466123953586 3.406145783033655 50.00034398585142 6.8211218211856375 3.9398154709116264 4.940864527948397 4.422540103623379 50.00034699039654 4.400340601207278;
            2.816174582864582 4.177651692067246 3.440241189785426 5.48887363387536 5.111148448931829 4.01340191936394 4.902392049186602 4.171659238875505 5.730140267577619 4.365888877344505;
            2.870798067549258 4.792366703225127 3.4958627750508477 5.098792679800205 5.005804812812259 4.811374728738522 5.274601147169638 4.216763723121817 5.920402188518207 4.4171049583629065;
            3.0074779681543706 50.00127390458312 3.915943179245297 5.0777661767350155 5.907812220349082 5.972152483373368 6.279111440891856 4.4947312084085755 6.730482150814664 4.814878653393629;
            3.0686804495110978 5.218013835872536 4.111244604939353 4.61168630858382 50.000578281050856 50.00057771791046 6.668226645718321 4.596735435057381 5.940332353469701 4.878203059881916;
            2.9852933008948326 4.044135979098036 4.45575200925522 4.150982830161782 5.1592799014437745 5.621475450973397 5.989791521169789 4.772995482631877 5.097440527576931 4.693187410904323;
            0.770505517896416 50.0221453351744 49.977433282016115 49.994796109632944 49.99625712922945 50.01706842183307 49.997150276709355 49.9958371538607 49.99608619378662 50.0000245558576;
            3.7809432340909965 3.9508702413791164 4.732321644458939 49.99563123726151 5.055290328631164 4.7883494988738695 50.00613805697703 49.99877201603515 4.851135552077877 4.559674387908664;
            3.286021598822327 3.846781472742999 4.11779415839259 7.195621373137099 6.113720519646047 5.079938186108123 5.870399130777616 5.201911966429918 5.5157328066667555 4.422783233103084;
            3.0474615386219135 3.845083097522382 3.356559532096045 5.352587159047028 5.038206407042499 5.627377953430028 5.0951833011758 4.459120151286315 6.239489510455961 3.9751403664369795;
            2.8835476724721665 4.132382132044693 3.3197218119735514 5.052955588820596 4.301262503049758 50.000613223366294 4.428396428024119 4.183429097480159 5.280273821107653 4.033096098328641;
            2.8582924631216287 4.644487215192614 3.3882945190708376 4.970210088446922 4.236679680819828 50.00074818765858 4.6067935385329655 4.177515109794103 5.422368402568677 4.187710904357562;
            2.6155008373458197 5.781362970995018 3.34092371257164 4.4617508858127515 4.18389479314011 6.536582403303218 4.3794184925311805 3.9417941905246603 5.471884986836887 4.110761590458081;
            2.479227174807131 4.114724340345688 3.868847770572708 4.049064595454579 4.9002321514958425 5.222758568206635 4.377103197801824 3.9037402741478147 5.053391352777617 4.2039127532486065;
            2.8206129862301537 3.922112520192773 4.7538935282419015 4.197060035581835 50.00025684631027 4.5877827524074455 4.868560569094122 4.111449775844081 4.8920592425713485 4.443419229921334;
            3.1005690125163237 4.103486764103399 5.031314094201354 4.295266108667565 5.639249465881078 4.2306265521211355 4.672635899107255 4.283742561156102 4.466375154248015 4.405219360037229;
            3.614548629521911 3.9094130716989017 5.499283952642799 5.245748728452489 5.220863070843758 4.587412777082012 7.1611254350909945 5.573320057903614 5.058522498365041 4.730773491578082;
            3.404094364323472 4.032146931072981 5.304679961901445 5.072400464904871 50.00081133607141 5.006315155121635 7.277173010876425 5.047662174944692 6.433729452267025 4.782218205381474;
            3.147104269145114 4.022859344512929 3.5659048622731166 4.9525154772626925 4.058565417763196 5.265528586581359 5.442110073198485 4.529015607045205 5.681128687184468 4.303641680572019;
            3.0503848395104853 4.23037793094683 3.497884693940404 5.003490425716116 4.1768099417265745 6.0742155135354485 4.96200227521473 4.426482859808586 5.171383614487093 4.192206761322279;
            2.7035963810061876 4.239770360074619 3.4923986382201866 4.836867218683343 4.254444824336912 7.257856715672224 4.32353677539726 4.0846105630482255 5.069097519018713 4.192122589618272;
            2.381052968619199 3.502652893317791 4.642428761632686 4.682337845830635 4.329292486980471 7.016262342431157 4.065463635008613 3.812439399180058 5.35177672985514 4.300864559806274;
            2.431305969159168 3.549268489759675 6.3457025322172145 5.282935647558233 4.999933103131333 5.33766185152838 4.385611269394373 3.9285141569754556 5.530030246632864 4.444202834108181;
            2.8522677560801593 3.7446400215809024 50.000381711158234 5.698537097870403 50.00038593222824 4.68433455923228 5.0377995280811065 4.073150257536064 5.042982778823827 4.672257355956057;
            3.061892441556516 3.8152971602408665 50.00014641433891 5.364159849710705 5.831507693036469 4.163223871800199 4.770646524487844 3.927950197569948 4.326751088634266 4.647307771072651;
            3.2345916965724917 3.285135034835081 50.00016565578748 3.660202709623029 5.507023111990454 4.1816621894560475 5.968096189125302 4.776743219382171 5.353794259214591 5.024394388743772;
            3.2099291063211792 3.5916230906300544 7.200422771586608 4.125112993174013 50.0005181243142 4.823675002668097 50.00051732797905 4.7500252123663795 50.000518839218856 5.044106867272322;
            3.2293412199961185 4.209443833133589 6.810147296815718 4.60687506419523 5.624381310829059 5.8355229662502355 5.790968792638305 4.865279565717335 5.641002068626446 5.166758971412354;
            3.35914147397689 4.786813302167029 6.417460346431322 5.479457505611003 5.434362430547801 50.00325296346367 5.550034027507782 5.298251612934973 5.68956821658999 5.5416563053879075;
            2.6729947536934127 4.736553416032778 5.423287348984638 5.876127636252825 5.036264712941976 6.564688836337066 4.957599171626802 4.928096603022251 5.609591068617689 5.384691373892964;
            2.423293665577064 4.1845652765418535 4.703599717835956 6.522383415453729 5.059154661905556 5.8439920728953245 4.666637821316558 4.778749175034966 50.002712434234674 5.510287161494939;
            2.4996328699966113 3.878016104786974 4.462037287553063 5.41571277636597 6.4182960340288115 50.00142988064976 5.113738261544451 4.845578038327684 50.00142914521251 5.686232286393225;
            3.019875732009334 3.60874291012167 4.455085899421507 5.2962503312813105 5.56589890029815 5.43861778518148 5.815868533186459 4.644681284452459 5.1890878815477945 5.818375968491184;
            3.0845649298476836 3.5679293007235793 4.419949085443794 5.133815149241085 4.952326269815087 4.502303277732307 5.7491345308912445 4.201843601160576 4.28604690721663 50.00018504252844;
            3.3321340561190413 3.1836819494903246 3.9923685756045435 3.836665211943465 5.951619794792969 4.368478141045303 50.00019204755473 4.551886936473988 5.665140415313201 5.574581799085291;
            3.0602437414543955 3.324276250285585 3.765604390993654 4.070182338475117 50.0005318441699 4.847060628571623 5.719442965335174 4.306730185179825 6.638557402784695 5.1015193001584365;
            3.0524755079047536 3.819481838303508 4.063758509007532 4.3312539414007984 5.802299172677724 7.672013877901275 5.320794287432567 4.979261742219895 5.30707560509308 5.360247937323517;
            2.7671937664279054 4.462664097033701 4.261473885674423 5.090429612780932 5.5710314158583225 5.772561401730212 5.287243059366106 5.237841517483582 5.349893417374869 5.99704597097473;
            2.594743110865738 5.19417540471612 3.044391491809347 50.00173249999142 5.7261682361771555 4.890996878200468 5.0647619455915995 6.889897429254449 6.132359783113472 50.001729762314774;
            2.6124459297516527 4.594139844888546 3.569699723107731 4.737049593332938 3.7074617927407707 4.686255588157603 5.285605821200115 4.551162672786227 5.650753686350231 5.343642641994529;
            3.2020835625049795 3.7253417524788768 3.384650982861287 4.589267556336793 4.208960074353334 5.021206386760498 50.00139487133142 5.159431636026635 5.514211820888296 5.29245146031014;
            3.391904510470968 3.474252408344615 3.3290749611391104 4.247675043552783 4.581348142765754 5.759636174196922 5.910237810290807 5.933999291179361 50.0009794838162 5.353318629854985;
            2.9946440872824867 3.3421084418377296 3.399873219081586 3.8577240934442525 4.194793597575213 5.611240728808599 5.591274419704082 5.545329588887761 3.8410623160375277 4.937536679227351;
            3.7686748721828627 3.309704403605332 4.737259553211615 3.8610808901576372 6.270491537306851 4.657794020910309 5.639668446606231 4.433610820717116 50.000201303338024 5.276062256276259;
            3.295026966754836 3.3945272259051356 4.166431702873683 3.842443321383322 50.00048118317826 5.542849529214906 5.034153145357404 4.570395794486657 5.5771560755257665 5.076328748109537;
            3.1850242257061665 3.874498912613562 3.928446966171929 4.300806076521039 50.00101337048283 5.865143771094271 5.0903092501251335 5.316471273430479 5.329681505773826 5.312400083669689;
            2.9905966653474954 4.346840205311605 3.345349170858771 5.0033765403473405 6.504081804026572 4.714572577519998 5.07790699434715 50.00099071583822 5.276420612710947 5.628692272802487;
            2.7154640174129714 6.4894237000049095 3.0921899236597827 5.570018139249259 4.383244700487182 4.201120447291937 5.52228248105267 4.500253836374677 50.00220697759307 8.057275318922986;
            3.0245314949996116 4.726037597156461 3.4670344897477436 4.425367764160256 3.7249292919413657 4.19790049864603 6.440022937398038 4.025474216308526 5.036222392785323 5.219147190519178;
            3.012723991925472 4.093820432385984 3.4351176723336545 3.8770998513092256 3.9580000832380877 4.020361286370083 5.20230512945277 3.9715692549541632 4.740502524608676 4.876691514632784;
            3.1283480505206307 3.861329625517181 3.4852907881014215 3.7023893759665603 4.1749084279053434 4.184473770333807 4.798552346454591 4.378046151106848 4.976190046429867 4.959570224645462;
            3.382491628313944 3.501786737499715 3.2457618542949147 3.7164387115722377 4.070722216024353 4.9366727303461815 4.408869208608504 4.602658797909878 5.853105443234106 4.885091872505181;
            49.97982531721039 50.01310455442892 49.98415926674639 49.99108325177094 50.002788395650555 49.96686651588131 49.98583534169897 49.94958663797937 50.00949492569825 49.98630986145288;
            3.520787284692804 3.4267809173129122 4.4094661060579465 3.7189963642244224 6.418172433291145 50.0001997903738 4.59335788519045 4.4811139469600265 5.226775211799095 4.691616402544112;
            3.1847261503742628 3.786724914390721 3.705179290148731 4.036594258228583 5.811917469500408 4.92387691425371 4.569354253314695 5.225711195994538 4.9219110541191515 4.675497430603956;
            3.154609829820411 4.402534598669322 3.366210273676605 5.199534433806859 5.120241883228144 4.5225275972013765 4.899654858109082 6.502789030818169 5.311627979971485 5.036041195700986;
            3.1739800887390452 50.00112900150724 3.2418372994422686 5.283327503793449 4.350118786975944 4.301884008322459 6.587986680837148 4.476579095956219 6.3922873467246575 7.188153670440626;
            3.043427045865513 4.708152647222268 3.6103940737346254 4.108224174817756 4.5609303592290145 3.880144530691119 5.298640629708911 4.2974110429492685 5.067514479479832 5.599509066053334;
            2.7238054741043882 3.879833549932682 3.365264359076226 3.301607318911954 3.9380201514627746 3.4580147161154904 4.2374472538868355 3.7701843323730144 4.467629026653476 4.586157394274209;
            2.8061113372127466 3.6746289028444363 3.2435962823011106 3.247740720015222 3.821389306983476 3.6974450782917003 3.9148810894683903 3.886776075967818 4.48404356860543 4.561018814308009;
            3.1284446938219537 3.3985421987388293 2.9871019843304687 3.2967011968157744 3.6673296421660773 4.163803909322948 3.543624066194454 3.9556839015582077 4.637930512011862 4.885002945545739;
            ]

    elseif input_length == 12 && N_models == 9
        log_const_value = [
            4.556810235621983; 4.720247555693373; 4.033832609938437; 4.4795896797200525; 4.405303541754765; 3.557269918234354; 5.073645619550549; 5.229516137727437; 5.020388621710139
            ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            2.82628540335962 3.665310067974206 4.520101374205437 3.869518645950256 4.419722603851037 7.423251820808755 6.548973695040621 4.824372222908593 7.366112836293829 50.00324575486789 5.471514911300692 50.00324573371131;
            2.951876935855071 4.570353807347402 4.229644737891365 5.237870677287367 5.1945301785210605 4.984437826106875 4.029947042604727 6.2104374122788535 6.007279198423167 50.00508332026936 3.7801558831116524 50.005083284437205;
            2.957087526571235 4.659097612676535 3.4326844434265666 3.6857048457143833 4.4091153396934475 50.0024084981675 5.02291767547961 50.00241257696685 4.913644247018723 5.077569563933369 4.213252610467419 5.352005033084474;
            2.6366251449479217 7.3362864950797535 2.892904280121123 3.357327094805415 4.453564414210269 5.789680861411201 5.787880561492943 3.558283227631013 5.249518823182906 5.491923335752803 5.138613068581935 5.180104644947623;
            2.652895237314304 4.675862865485024 3.352145566003162 3.379534938195705 5.3685818226354955 4.76122875727631 5.0757984981417605 4.104691011319675 4.9193262891253635 2.9801416024606175 50.00878091703866 3.516614707558693;
            2.204441911828585 3.5582700862053747 3.3819995130991796 3.0065745810124507 3.050803176447248 4.314466116050281 3.7882118344787523 4.443166523586262 6.512056764033456 5.191218132191692 4.136167576532535 50.003417206579755;
            2.8459496641651905 3.941643891232828 3.0051919292273395 5.831481872404937 3.79019224028509 5.252486461635919 5.582808260307467 3.803736094574702 4.352659303128723 5.175262731906473 6.678495860248164 5.034997184738469;
            2.8435028939946942 3.3609784858203184 3.180103196390907 4.052715368344256 4.393234237287341 3.924106051743196 6.615361286295213 3.8899988433933386 5.049335193818169 4.628456452327019 7.0087487729738385 5.1845914446859656;
            2.572684516433846 3.523317270856209 4.266638330228742 3.875644384563964 3.4164201354272805 4.4743989780636255 5.249927904266602 3.9241303159611878 5.2696827766268335 5.454299367167478 6.014435935101237 5.663138484729432;
        ]

    elseif input_length == 12 && N_models == 16
        log_const_value = [
            3.900434619288212; 3.952880584468669; 4.06715128774773; 3.819370966727086; 4.533125211762778; 4.1877310768775855; 4.115925600445493; 3.737624901645159; 4.381653965217126; 4.3158953242720095; 4.222047972422764; 4.045811978754884; 4.262806408164608; 4.518045870517009; 4.565309055162698; 4.369633674825048
            ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            2.915654036512144 3.331468841149593 4.483309342750211 4.493841271046539 4.882663330439173 6.187773562018756 4.114853274050009 5.201622076867916 5.8018060440463595 5.223505812738457 50.000765408544275 5.705626054182377;
            2.724069224361787 4.450815291036534 3.6408703649343277 5.625285885196905 4.781251184648392 3.813237933598847 50.00185770203606 6.433907595008146 6.9824179874341175 50.00181456909232 4.004124195152517 5.578889559236069;
            2.8494578329362557 3.6055264369884528 3.401742083679613 4.06158646670877 4.236690130805618 3.8430615394283216 4.005762121440701 6.090891464427329 5.103864587343805 4.7347639615320345 4.012305724456963 50.00178018084887;
            3.0294553493514247 3.5731639675596423 3.4278583249838914 3.6977007612357045 3.932523413304011 4.580869197299901 4.084482022343211 5.32901485595008 5.074666151566807 5.3632606262026 4.491859727908358 5.095128983674632;
            2.901231288790609 3.590553356880051 8.01862000016448 5.968282522259192 5.4388225410745665 5.293117558272573 5.182766804238303 4.456373340565916 5.973918864274685 5.282367556474882 5.661631634242404 50.005471575074516;
            2.260514169189608 3.6636431427258023 4.889680542888001 5.983555079509557 4.916385349927277 4.083280407771228 5.46212016039699 4.409412427252477 4.88171251379282 50.00571768917059 6.279206172203029 6.116126121381169;
            2.7473294096686507 3.3622119600804026 4.084441875788054 4.558965257310431 3.714481585607387 3.945651071145085 5.795131354051361 50.00289548776469 4.7884009151388645 2.949740068425444 4.612037417427832 6.1307030885098746;
            2.8439134240783526 3.5238115176293707 3.264638027818648 4.2447240059301965 4.289921744374451 4.5319745374864615 50.00102227595793 6.666240150399347 4.843326512498361 50.001021269941944 3.8613295614517935 50.00102688861397;
            2.692126294182429 3.5752573651590067 4.091188823487892 5.341263104122395 5.14017817887973 4.248330690781317 5.732250495553071 4.9591761523366165 50.00470578283341 5.519306767407907 4.6883431932345685 5.581396925997898;
            2.853077468975658 3.489944571502839 3.6364360950918093 3.9976333159088595 3.1257639089522526 5.623642898239793 4.2382709271378936 4.167111034346094 5.579906620266571 3.614230059283866 5.301520050528744 5.127730987754145;
            2.622413807011583 6.218773633823887 3.2662053711422887 4.76080008940736 3.0305120943065695 5.3929421785923175 3.844357151392419 3.7090483614479246 4.936669862384533 50.002500745542214 4.760870399676764 50.00249482030691;
            2.7645790341719385 3.571981122491746 3.1169008879057922 4.615814240796065 5.204574502993739 4.1594765258817175 4.806278363557985 6.097407727380554 6.1132513758218 4.933648051091118 3.9743489617433543 50.00228330174916;
            2.717592436299518 3.206735529486085 3.567563867951926 3.850635156578511 4.489216996828994 5.880315489201759 4.950620968681625 6.091219900608812 5.884911540648859 7.524984624309635 5.329993915887785 6.735356886391049;
            2.9749749891982273 3.744453013568772 3.4847925514660028 4.669575150201727 5.493156877511124 5.482655025306687 3.8113402435210753 3.4472232726399406 50.00315800251567 4.442331992350049 5.244972194688 5.23709447293197;
            2.9918531434076265 5.254532651478837 3.285509499342138 4.46059779580528 3.0789375898318916 4.478024295416608 3.75029761195257 4.090670297572219 50.00506567895344 6.997731447097648 5.224055830422011 6.925684368247937;
            3.016441013801612 3.804958239386464 3.5561512643118185 4.198230474286008 4.768179216696284 4.645829511462993 6.339635900882577 5.292057310122721 50.00314924077691 5.8047073009534795 4.749916123500113 5.753945950962057;
        ]

    elseif input_length == 12 && N_models == 25
        log_const_value = [
            3.3425140288383366; 3.9381452175064857; 3.9114014958766226; 3.76732549372293; 2.469074880873678; 3.9326948990572568; 3.9650574241306082; 3.7343046142312573; 4.103727954839095; 4.188939496618472; 3.8685085503171783; 3.6377862255148012; 3.9937775266694566; 4.407667406590295; 4.541750085796781; 4.1184093413760365; 4.277393180451813; 4.037239120638345; 4.6138528429476375; 4.9496479274547225; 3.826355279575225; 4.116242312852972; 4.2027861338810215; 4.573961447314509; 3.165689177092424
            ]
        const_value = exp.(2 .* log_const_value)
        rbf_len = [
            2.8672958126535697 3.202653776849799 6.772771312678156 3.803774320005943 3.156103705691071 3.334729249015243 50.00099662962679 4.333811363163206 49.99818156266346 49.9996891566011 50.00137182155331 50.00142641597806;
            3.1037812416101387 3.56038351945297 4.068350914901426 4.422367736880533 4.265580382569518 4.227092283568747 4.64887779339108 5.890310250536502 5.546902421478331 5.2430247579698115 4.833415898274016 4.39787490146011;
            2.958630706100435 3.9611286672285067 3.8807465162083012 5.261642748549686 4.524851040693578 4.0168910609238955 5.083007517779653 5.19330832550108 50.00071104189296 5.4222756808609756 4.904632222521449 4.659819416326206;
            3.147786970690492 4.562716839249068 3.377046797173631 5.335397823868755 4.381207037011707 4.314123621954194 50.00085465454167 4.825832325977888 6.084605223530428 5.726880718177877 5.457135395894138 50.00085721383748;
            1.2615301914346346 50.00005608661924 2.742884348324995 49.99989090527234 1.4017442694965165 50.00008167140124 50.00042035739221 50.000209442567346 49.999212754169164 50.000134905266684 50.000383030968436 50.000174249633005;
            3.1651066421363323 3.7149817575355106 5.125645982017281 4.350583551071012 4.305900614359285 4.256740326078192 5.984708823976912 5.177522274108105 6.17249556418998 6.53096719648275 4.978234100231466 4.909156669302249;
            2.6957980176089764 3.7490714231059457 5.537566993699213 4.305174874378103 4.679825139477543 7.342075002649426 5.329162953051266 50.002006745408984 4.55883112609906 6.231818310951993 5.2177197525252055 4.0202244230246515;
            2.5961040864192992 4.965228243509037 3.6726514309946534 3.4387083087029877 5.128410637271517 5.297283048006662 4.161431460125223 5.648726060388561 4.457486919191204 4.586378282726759 50.001575388927776 3.7408537638982797;
            2.777025021062713 4.816303466958515 3.4911295007898575 50.002258900034455 5.0433502620994695 6.373529522944605 4.4021306542740275 7.56834059510561 4.886458229651598 4.078113065046334 50.00226102280747 4.776888079144217;
            3.3447068723936604 4.296950071161278 3.1486889970815337 6.261902016909216 4.4481709820974515 4.169076302952924 4.378334265846068 4.431464873693788 4.114052048732806 5.391884608615775 7.1351068085135525 4.435678623518427;
            2.9419212419695846 3.8626849498543145 3.9913676920232595 6.328794187725269 4.910173870012987 4.136285487904773 4.166731415207901 5.790994496485863 4.410980041819474 50.000957691324025 4.516784675865764 6.007488526362061;
            2.6695262932976624 3.936723369504694 3.272019974806737 3.3593569972965946 50.000450686773 4.342160988141508 50.00040178063382 50.00040255854376 4.698158669521416 50.000409950615726 50.000380143382586 3.107812483607785;
            2.5212970171825293 5.1137382237769256 50.00255237008044 4.904553962537517 5.754525823641456 6.250681711304344 4.709010278201204 5.742619981690743 4.2561041844677865 4.5023527949596795 50.00256476067987 3.521671949054884;
            2.9823768109232254 4.390464019875733 3.8575883964563467 5.064165923351779 5.487056944982633 4.979470520267658 4.326319184016213 5.131824665838343 4.440057694561599 3.743418782416313 50.00257116933761 4.073271787945835;
            3.3492914446021067 4.271955738211971 3.9474223331821263 5.019784754087709 4.7117394279220735 4.233802175123011 4.023289928069059 4.796716809797172 3.8263654005653773 5.219751955629727 50.00063502519462 4.395776196434036;
            3.2816607842836953 4.076714186686536 3.47380137433324 4.060252609481346 5.925275015537429 5.2612394225815855 4.37397116130859 4.5889071392508365 3.698694737082008 5.081248042020626 4.406430186746349 4.151170682962734;
            3.0217079364789177 5.307502787424221 3.596111929668551 4.672519611475951 4.0877442868079985 50.00344538633826 4.653226031444911 7.435256556611247 5.727298740139593 3.2968016840502323 4.752188311898342 3.8434302896181776;
            2.606136883527687 3.80589566734648 3.0762430271600953 4.6161492471503145 5.613198553773207 5.754025624657899 3.7915065511466177 4.281078152301511 6.213262845852671 5.567226620776104 6.258599334781555 3.273001924147901;
            3.006893557421166 3.6255810830175585 6.052065822093644 4.381548465684003 3.4750001310957837 5.0459173995769735 4.591950515679792 4.75821303728965 5.230892652269125 6.436510600666707 6.593706504995907 3.8192577980794433;
            3.735655419638154 4.168775987698145 4.863655951731561 4.746245003162792 4.845977169639749 4.988321017169465 4.259566819622175 5.213097404821325 4.273525894392875 5.951891793034542 50.00059911076376 4.551174856536252;
            3.119061544882052 4.905932450304725 3.09641450608644 3.7669728284473947 4.968389052629301 50.00088576776064 50.000839342341614 4.9971157767548595 4.156042588884436 50.00086100430629 4.869541389977907 4.681821811751194;
            2.838560211677496 5.300086127504839 3.0556950144919 4.179215760303294 6.270287512904125 4.829121572770387 50.002250831611185 4.561390794340734 50.00225222407399 5.68083729402717 4.417164830434813 4.593583770699159;
            2.9235453802700566 3.4039557738908353 3.634222072263847 5.099781746790658 5.401013282792753 4.909274758528097 4.613205527561871 4.153504857005073 5.902563863949176 6.2935808024925555 4.599630275416624 4.277497634344592;
            3.1950049657072435 3.476463915337984 5.4305956635368675 3.8486140599223924 5.005622086917142 6.439166387854721 4.7226379361245145 4.621273725979385 5.458606254531152 5.323038940183807 6.674398339588343 3.674433461632121;
            1.442050372927845 2.032858850797304 2.357346424968071 4.026819888769113 1.2817324606227407 4.950802978558561 50.00040866934189 49.9984962819592 4.909153691355176 49.99951751802155 49.99954152648533 50.00298052834981;
            ]
    end
    =#

    for i in 1:N_models
        opt_kern = const_value[i] * (KernelFunctions.SqExponentialKernel() ∘ ARDTransform(1 ./ exp.(rbf_len[i, :])))
        opt_f = AbstractGPs.GP(opt_kern)
        opt_fx = opt_f(input_values', regularization_noise)

        data_i = output_values[i, :]
        opt_post_fx = posterior(opt_fx, data_i)
        println("optimised GP: ", i)
        push!(models, opt_post_fx)
        println(opt_post_fx.prior.kernel)
    end

end

#=







=#

# using Optim
# using ParameterHandling

#Optimisation
function optimize_hyperparameters!(
    gp::GaussianProcess{AGPJL}, args...; kwargs...)
    # `kwargs`: Keyword arguments for the optimize function from the Optim package
    N_models = length(gp.models)
    #=
    for i in 1:N_models
        function loss(θ)
            fx = build_finite_gp(θ, gp.models[i])
            lml = logpdf(fx, ytrain)
            return -lml
        end
        θ_init = gp.models[i].θ #### θ should be kernel hyperparameters extracted from gp.models
        θ_flat_init, unflatten = ParameterHandling.value_flatten(θ_init)
        loss_packed = loss ∘ unflatten

        function fg!(F, G, x)
            if F !== nothing && G !== nothing
                val = loss_packed(x)
                grad = ForwardDiff.gradient(loss_packed, x)
                G .= grad
                return val
            elseif G !== nothing
                grad = ForwardDiff.gradient(loss_packed, x)
                G .= grad
                return nothing
            elseif F !== nothing
                return loss_packed(x)
            end
        end

        options = Optim.Options(; iterations=maxiter, show_trace=true)

        result = optimize(Optim.only_fg!(fg!), θ_flat_init, optimizer, options; inplace=false)
        θ_opt = unflatten(result.minimizer)
        gp.models[i].θ = ParameterHandling.value(θ_opt)

        println("Optimized hyperparameters of GP model ", i)
    end
    =#
end

function predict(
    gp::GaussianProcess{AGPJL},
    new_inputs::AbstractMatrix{Dual}
) where {FT <: AbstractFloat, Dual}

    N_models = length(gp.models)
    N_samples = size(new_inputs, 2)
    μ = zeros(Dual, N_models, N_samples)
    σ2 = zeros(Dual, N_models, N_samples)
    for i in 1:N_models
        pred_gp = gp.models[i]
        pred = pred_gp(new_inputs)
        μ[i, :] = mean(pred) ####
        σ2[i, :] = var(pred)
    end
    # mean_and_var(fx) == (mean(fx), var(fx))
        # var(fx) == diag(cov(fx))
    # μ, σ2 = mean_and_var(pred_gp(new_inputs'))

    σ2[:, :] .= σ2[:, :] .+ gp.alg_reg_noise
    #println("var + noise", σ2)
    return μ, σ2
end
